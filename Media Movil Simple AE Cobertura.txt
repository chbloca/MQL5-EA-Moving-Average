//+------------------------------------------------------------------+
//|                              Media Movil Simple AE Cobertura.mq5 |
//|                                            Copyright 2023, Chris |
//|                                                                  |
//+------------------------------------------------------------------+

// Información del asesor

#property copyright "Copyright 2023, Chris"
#property description "Asesor Experto que aplica el sistema de media móvil simple y es provisto como parte del curso en trading algorítmico"
#property link      ""
#property version   "1.00"

// Notas del asesor


// Enumeraciones


// Variables input y globales

sinput group "AE Ajustes Generales"
input ulong MagicNumber = 101;

// si encuentras error 4756, debes usar esto
input bool UtilizarPoliticaRellenado = false;

input ENUM_ORDER_TYPE_FILLING PoliticaRellenado = ORDER_FILLING_FOK;

sinput group "Ajustes media móvil"
// 30 número de velas a tener en cuenta por defecto
input int PeriodoMA = 30;

// media móvil simple por defecto
input ENUM_MA_METHOD MetodoMA = MODE_EMA;

// número de velas desplazadas la media móvil, por defecto 0
input int ShiftMA = 0;

// por defecto la media móvil se basará en los cierres de velas
input ENUM_APPLIED_PRICE PrecioMA = PRICE_CLOSE;

sinput group "Gestión monetaria"
// 1 minilote por defecto
input double VolumenFijo = 0.1;

sinput group "Gestión de posiciones"
// stop loss
input ushort SLPuntosFijos = 0;

// stop loss que está por encima o debajo de la media móvil
input ushort SLPuntosFijosMA = 0;

// take profit
input ushort TPPuntosFijos = 0;

// trading stop loss
input ushort TSLPuntosFijos = 0;

// breakeven
input ushort BEPuntosFijos = 0;

datetime glTiempoBarraApertura;
int ManejadorMA;

// Procesadores de eventos

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit()
  {
   glTiempoBarraApertura = D'1971.01.01'; // esto equivale a un año en segundos
   ManejadorMA = MA_Init(PeriodoMA, ShiftMA, MetodoMA, PrecioMA);

   if(ManejadorMA == -1)
     {
      return (INIT_FAILED);
     }

   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {


  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {

// Control de nueva barra

   bool nuevaBarra = false;

// Comprobación de nueva barra

   if(glTiempoBarraApertura != iTime(_Symbol, PERIOD_CURRENT, 0))
     {
      nuevaBarra = true;
      glTiempoBarraApertura = iTime(_Symbol, PERIOD_CURRENT, 0);
     }

   if(nuevaBarra)
     {
      // -------------------- //
      // Precio e indicadores //
      // -------------------- //

      double cierre1 = Close(1);
      double cierre2 = Close(2);
      double open1 = Open(1);

      // Normalización a tick size
      double tickSize = SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_SIZE);
      cierre1 = round(cierre1/tickSize) * tickSize;
      cierre2 = round(cierre2/tickSize) * tickSize;

      double ma1 = ma(ManejadorMA, 1);
      double ma2 = ma(ManejadorMA, 2);

      // -------------------- //
      // Cierre de posiciones //
      // -------------------- //

      // Señal de cierre y cierra de posiciones
      string exitSignal = MA_ExitSignal(cierre1, cierre2, ma1, ma2);

      if(exitSignal == "CIERRE_LARGO" || exitSignal == "CIERRE_CORTO")
        {
         CierrePosiciones(MagicNumber, exitSignal);
        }

      Sleep(1000); // dar tiempo al servidor para tramitar la orden

      // --------------------- //
      // Colocación de órdenes //
      // --------------------- //
      double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
      double stopLoss = CalcularStopLoss("LARGO", SLPuntosFijos, SLPuntosFijosMA, ma1);
      double takeProfit = CalcularTakeProfit("LARGO", TPPuntosFijos);
      Print("bid: ", bid);
      Print("SL: ", stopLoss);
      Print("TP: ", takeProfit);

      // Señal de entrada y apertura de posiciones
      string entrySignal = MA_EntrySignal(cierre1, cierre2, ma1, ma2);
      Comment("AE #", MagicNumber, " | ", exitSignal, " | ", entrySignal, " señales detectadas");

      if((entrySignal == "LARGO" || entrySignal == "CORTO") && RevisionPosicionesColocadas(MagicNumber) == false)
        {
         ulong ticket = AperturaTrades(entrySignal, MagicNumber, VolumenFijo);

         // Modificación de SL & TP
         if(ticket > 0)   // existe una posición para modificar
           {
           }
        }

      // --------------------- //
      // Gestión de posiciones //
      // --------------------- //


     }

  }

// --------------------- //
// Funciones de precio   //
// --------------------- //

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Close(int pShift)
  {
   MqlRates barra[]; // crea un objeto array del tipo estructura MqlRates
   ArraySetAsSeries(barra, true); // configurar array barra como un array en serie (la vela actual se copiará en índice 0, la vela 1 índice 1, ...)
   CopyRates(_Symbol, PERIOD_CURRENT, 0, 3, barra); // copia datos del precio de las barras 0, 1 y 2 a nuestro array barra
   return barra[pShift].close; // retorna el precio de cierre del objeto barra
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Open(int pShift)
  {
   MqlRates barra[]; // crea un objeto array del tipo estructura MqlRates
   ArraySetAsSeries(barra, true); // configurar array barra como un array en serie (la vela actual se copiará en índice 0, la vela 1 índice 1, ...)
   CopyRates(_Symbol, PERIOD_CURRENT, 0, 3, barra); // copia datos del precio de las barras 0, 1 y 2 a nuestro array barra
   return barra[pShift].open; // retorna el precio de cierre del objeto barra
  }

// Funciones de la media móvil

// ----------------------------- //
// Funciones de la media móvil   //
// ----------------------------- //

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int MA_Init(int pPeriodMA, int pShiftMA, ENUM_MA_METHOD pMetodoMA, ENUM_APPLIED_PRICE pPrecioMA)
  {
// En caso de error, al inicializar el MA, GetLastError() nos dará el código del error y lo almacenará en _LastError
// ResetLastError cambiará el valor de la variable a _LastError a 0
   ResetLastError();

// El manejador es un identificador único para el indicador. Se utiliza para todas las acciones relacionadas con este, como obtener datos o eliminarlo
   int Manejador = iMA(_Symbol, PERIOD_CURRENT, pPeriodMA, pShiftMA, pMetodoMA, pPrecioMA);

   if(Manejador == INVALID_HANDLE)
     {
      Print("Ha habido un error creando el manejador del indicador MA", GetLastError());
      return -1;
     }

   Print("El manejador del indicador MA se ha creado con éxito");
   return Manejador;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double ma(int pManejadorMA, int pShift)
  {
   ResetLastError();

// Creamos array que llenamos con los precios del indicador
   double ma[];
   ArraySetAsSeries(ma, true);
// Llenamos el array con los 3 valores más recientes del MA

   bool resultado = CopyBuffer(pManejadorMA, 0, 0, 3, ma);
   if(resultado == false)
     {
      Print("Error al copiar datos: ", GetLastError());

     }

   double valorMA = ma[pShift];

// Normalizamos valorMA a los dígitos de nuestro símbolo y lo retornamos
   valorMA = NormalizeDouble(valorMA, _Digits);

   return valorMA;
  }
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string MA_EntrySignal(double pPrecio1, double pPrecio2, double pMA1, double pMA2)
  {
   string str = "";
   string valores;

   if(pPrecio1 > pMA1 && pPrecio2 <= pMA2)
     {
      str = "LARGO";
     }
   else
      if(pPrecio1 < pMA1 && pPrecio2 >= pMA2)
        {
         str = "CORTO";
        }
      else
        {
         str = "NO_OPERAR";
        }

   StringConcatenate(valores, "MA 1: ", DoubleToString(pMA1, _Digits), " | ", "MA 2: ", DoubleToString(pMA2, _Digits), " | ",  "Cierre 1: ", DoubleToString(pPrecio1, _Digits), " | ",  "Cierre 2: ", DoubleToString(pPrecio2, _Digits));

   Print("Valores del precio e indicadores: ", valores);

   return str;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string MA_ExitSignal(double pPrecio1, double pPrecio2, double pMA1, double pMA2)
  {
   string str = "";
   string valores;

   if(pPrecio1 > pMA1 && pPrecio2 <= pMA2)
     {
      str = "CIERRE_CORTO";
     }
   else
      if(pPrecio1 < pMA1 && pPrecio2 >= pMA2)
        {
         str = "CIERRE_LARGO";
        }
      else
        {
         str = "NO_CERRAR";
        }

   StringConcatenate(valores, "MA 1: ", DoubleToString(pMA1, _Digits), " | ", "MA 2: ", DoubleToString(pMA2, _Digits), " | ",  "Cierre 1: ", DoubleToString(pPrecio1, _Digits), " | ",  "Cierre 2: ", DoubleToString(pPrecio2, _Digits));

   Print("Valores del precio e indicadores: ", valores);

   return str;
  }

// -------------------------------------- //
// Funciones de las bandas de Bollinger   //
// -------------------------------------- //

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int BB_Init(int pPeriodBB, int pShiftBB, double pDesviacionBB, ENUM_APPLIED_PRICE pPrecioBB)
  {
// En caso de error, al inicializar las BB, GetLastError() nos dará el código del error y lo almacenará en _LastError
// ResetLastError cambiará el valor de la variable a _LastError a 0
   ResetLastError();

// El manejador es un identificador único para el indicador. Se utiliza para todas las acciones relacionadas con este, como obtener datos o eliminarlo
   int Manejador = iBands(_Symbol, PERIOD_CURRENT, pPeriodBB, pShiftBB, pDesviacionBB, pPrecioBB);

   if(Manejador == INVALID_HANDLE)
     {
      Print("Ha habido un error creando el manejador del indicador BB", GetLastError());
      return -1;
     }

   Print("El manejador del indicador BB se ha creado con éxito");
   return Manejador;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double BB(int pManejadorBB, int pBuffer, int pShift)
  {
   ResetLastError();

// Creamos array que llenamos con los precios del indicador
   double BB[];
   ArraySetAsSeries(BB, true);
// Llenamos el array con los 3 valores más recientes del MA

   bool resultado = CopyBuffer(pManejadorBB, pBuffer, 0, 3, BB);
   if(resultado == false)
     {
      Print("Error al copiar datos: ", GetLastError());

     }

   double valorBB = BB[pShift];

// Normalizamos valorMA a los dígitos de nuestro símbolo y lo retornamos
   valorBB = NormalizeDouble(valorBB, _Digits);

   return valorBB;
  }
//+------------------------------------------------------------------+

// ----------------------------------------- //
// Funciones para la colocación de órdenes   //
// ----------------------------------------- //

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
ulong AperturaTrades(string pEntrySignal, ulong pMagicNumber, double pVolumenFijo)
  {

   double precioAsk = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double precioBid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double tickSize = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);

//Precio debe ser normalizado a dígitos o tamaño del tick (ticksize)

   precioAsk = round(precioAsk/tickSize) * tickSize;
   precioBid = round(precioBid/tickSize) * tickSize;

   string comentario = "COMPRA" + " | " + _Symbol + " | " + string(pMagicNumber);

//Declaración e inicialización de los objetos solicitud y resultado
   MqlTradeRequest solicitud = {};
   MqlTradeResult resultado = {};

   if(pEntrySignal == "LARGO")
     {
      //Parámetros de la solicitud
      solicitud.action = TRADE_ACTION_DEAL;
      solicitud.symbol = _Symbol;
      solicitud.volume = pVolumenFijo;
      solicitud.type = ORDER_TYPE_BUY;
      solicitud.price = precioAsk;
      solicitud.deviation = 10;
      solicitud.magic = pMagicNumber;
      solicitud.comment = comentario;

      //Envio de la solicitud
      if(UtilizarPoliticaRellenado)
         solicitud.type_filling = PoliticaRellenado;

      if(!OrderSend(solicitud, resultado))
         Print("Error en el envío de la orden: ", GetLastError());
      //Si la solicitud no se envía, imprimimos código

      //Información de la operación
      Print("Abierta ", solicitud.symbol, " ", pEntrySignal, "orden #", resultado.order, ": ", resultado.retcode, ", Volumen:", resultado.volume, ", Precio:", DoubleToString(precioAsk, _Digits));
     }
   else
      if(pEntrySignal == "CORTO")
        {
         //Parámetros de la solicitud
         solicitud.action = TRADE_ACTION_DEAL;
         solicitud.symbol = _Symbol;
         solicitud.volume = pVolumenFijo;
         solicitud.type = ORDER_TYPE_SELL;
         solicitud.price = precioBid;
         solicitud.deviation = 10;
         solicitud.magic = pMagicNumber;
         solicitud.comment = comentario;

         //Envio de la solicitud
         if(UtilizarPoliticaRellenado)
            solicitud.type_filling = PoliticaRellenado;

         if(!OrderSend(solicitud, resultado))
            Print("Error en el envío de la orden: ", GetLastError());
         //Si la solicitud no se envía, imprimimos código

         //Información de la operación
         Print("Abierta ", solicitud.symbol, " ", pEntrySignal, "orden #", resultado.order, ": ", resultado.retcode, ", Volumen:", resultado.volume, ", Precio:", DoubleToString(precioBid, _Digits));


        }

   if(resultado.retcode == TRADE_RETCODE_DONE || resultado.retcode == TRADE_RETCODE_DONE_PARTIAL || resultado.retcode == TRADE_RETCODE_PLACED || resultado.retcode == TRADE_RETCODE_NO_CHANGES)
     {
      return resultado.order;

     }
   else
     {
      return 0;
     }

  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool RevisionPosicionesColocadas(ulong pMagicNumber)
  {
   bool posicionColocada = false;

   for(int i= PositionsTotal() - 1; i>=0; i--)
     {
      ulong posicionTicket = PositionGetTicket(i);
      PositionSelectByTicket(posicionTicket);

      ulong posicionMagico = PositionGetInteger(POSITION_MAGIC);
      if(posicionMagico == pMagicNumber)
        {
         posicionColocada = true;
         break;
        }
     }

   return posicionColocada;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void CierrePosiciones(ulong pMagicNumber, string pExitSignal)
  {

   MqlTradeRequest solicitud = {};
   MqlTradeResult resultado = {};

   for(int i= PositionsTotal() - 1; i>=0; i--)
     {
      // Resetear de los valores objetos solicitud y resultado
      ZeroMemory(solicitud);
      ZeroMemory(resultado);

      ulong posicionTicket = PositionGetTicket(i);
      PositionSelectByTicket(posicionTicket);

      ulong posicionMagico = PositionGetInteger(POSITION_MAGIC);
      ulong posicionTipo = PositionGetInteger(POSITION_TYPE);

      if(posicionMagico == pMagicNumber && pExitSignal == "CIERRE_LARGO" && posicionTipo == POSITION_TYPE_BUY)
        {
         solicitud.action = TRADE_ACTION_DEAL;
         solicitud.type = ORDER_TYPE_SELL;
         solicitud.symbol = _Symbol;
         solicitud.position = posicionTicket;
         solicitud.volume = PositionGetDouble(POSITION_VOLUME);
         solicitud.price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
         solicitud.deviation = 10;

         bool sent = OrderSend(solicitud, resultado);
         if(sent == true)
           {
            Print("Posición #", posicionTicket, " cerrada");
           }
        }
      else
         if(posicionMagico == pMagicNumber && pExitSignal == "CIERRE_CORTO" && posicionTipo == POSITION_TYPE_SELL)
           {
            solicitud.action = TRADE_ACTION_DEAL;
            solicitud.type = ORDER_TYPE_BUY;
            solicitud.symbol = _Symbol;
            solicitud.position = posicionTicket;
            solicitud.volume = PositionGetDouble(POSITION_VOLUME);
            solicitud.price = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
            solicitud.deviation = 10;

            bool sent = OrderSend(solicitud, resultado);
            if(sent == true)
              {
               Print("Posición #", posicionTicket, " cerrada");
              }

           }
     }
  }
//+------------------------------------------------------------------+

// Funciones para la gestión de posiciones

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double CalcularStopLoss(string pEntrySignal, int pSLPuntosFijos,  int pSLPuntosFijosMA, double pMA)
  {
   double stopLoss = 0.0;
   double precioAsk = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double precioBid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double tickSize = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);

   if(pEntrySignal == "LARGO")
     {
      if(pSLPuntosFijos > 0)
        {
         stopLoss = precioBid - (pSLPuntosFijos * _Point);
        }
      else
         if(pSLPuntosFijosMA > 0)
           {
            stopLoss = pMA - (pSLPuntosFijosMA * _Point);
           }

     }

   if(pEntrySignal == "CORTO")
     {
      if(pSLPuntosFijos > 0)
        {
         stopLoss = precioAsk + (pSLPuntosFijos * _Point);
        }
      else
         if(pSLPuntosFijosMA > 0)
           {
            stopLoss = pMA + (pSLPuntosFijosMA * _Point);
           }

     }

   stopLoss = round(stopLoss/tickSize) * tickSize;
   return stopLoss;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double CalcularTakeProfit(string pEntrySignal, int pTPPuntosFijos)
  {
   double takeProfit = 0.0;
   double precioAsk = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double precioBid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double tickSize = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);

   if(pEntrySignal == "LARGO")
     {
      if(pTPPuntosFijos > 0)
        {
         takeProfit = precioBid + (pTPPuntosFijos * _Point);
        }
     }

   if(pEntrySignal == "CORTO")
     {
      if(pTPPuntosFijos > 0)
        {
         takeProfit = precioAsk - (pTPPuntosFijos * _Point);
        }
     }

   takeProfit = round(takeProfit/tickSize) * tickSize;
   return takeProfit;
  }
//+------------------------------------------------------------------+
