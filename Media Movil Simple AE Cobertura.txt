//+------------------------------------------------------------------+
//|                              Media Movil Simple AE Cobertura.mq5 |
//|                                            Copyright 2023, Chris |
//|                                                                  |
//+------------------------------------------------------------------+

// Información del asesor

#include <FuncionesAEDirectorioEstandar.mqh>
#property copyright "Copyright 2023, Chris"
#property description "Asesor Experto que aplica el sistema de media móvil simple y es provisto como parte del curso en trading algorítmico"
#property link      ""
#property version   "1.00"

// Notas del asesor


// Enumeraciones


// Variables input y globales

sinput group "AE Ajustes Generales"
input ulong MagicNumber = 101;

// si encuentras error 4756, debes usar esto
input bool UtilizarPoliticaRellenado = false;

input ENUM_ORDER_TYPE_FILLING PoliticaRellenado = ORDER_FILLING_FOK;

sinput group "Ajustes media móvil"
// 30 número de velas a tener en cuenta por defecto
input int PeriodoMA = 30;

// media móvil simple por defecto
input ENUM_MA_METHOD MetodoMA = MODE_EMA;

// número de velas desplazadas la media móvil, por defecto 0
input int ShiftMA = 0;

// por defecto la media móvil se basará en los cierres de velas
input ENUM_APPLIED_PRICE PrecioMA = PRICE_CLOSE;

sinput group "Gestión monetaria"
// 1 minilote por defecto
input double VolumenFijo = 0.1;

sinput group "Gestión de posiciones"
// stop loss
input ushort SLPuntosFijos = 0;

// stop loss que está por encima o debajo de la media móvil
input ushort SLPuntosFijosMA = 0;

// take profit
input ushort TPPuntosFijos = 0;

// trading stop loss
input ushort TSLPuntosFijos = 0;

// breakeven
input ushort BEPuntosFijos = 0;

datetime glTiempoBarraApertura;
int ManejadorMA;

// Procesadores de eventos

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit()
  {
   glTiempoBarraApertura = D'1971.01.01'; // esto equivale a un año en segundos
   ManejadorMA = MA_Init(PeriodoMA, ShiftMA, MetodoMA, PrecioMA);

   if(ManejadorMA == -1)
      return (INIT_FAILED);

   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {


  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {

// Control de nueva barra

   bool nuevaBarra = false;

// Comprobación de nueva barra

   if(glTiempoBarraApertura != iTime(_Symbol, PERIOD_CURRENT, 0))
     {
      nuevaBarra = true;
      glTiempoBarraApertura = iTime(_Symbol, PERIOD_CURRENT, 0);
     }

   if(nuevaBarra)
     {
      // -------------------- //
      // Precio e indicadores //
      // -------------------- //

      double cierre1 = Close(1);
      double cierre2 = Close(2);
      double open1 = Open(1);

      // Normalización a tick size
      double tickSize = SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_SIZE);
      cierre1 = round(cierre1/tickSize) * tickSize;
      cierre2 = round(cierre2/tickSize) * tickSize;

      double ma1 = ma(ManejadorMA, 1);
      double ma2 = ma(ManejadorMA, 2);

      // -------------------- //
      // Cierre de posiciones //
      // -------------------- //

      // Señal de cierre y cierra de posiciones
      string exitSignal = MA_ExitSignal(cierre1, cierre2, ma1, ma2);

      if(exitSignal == "CIERRE_LARGO" || exitSignal == "CIERRE_CORTO")
         CierrePosiciones(MagicNumber, exitSignal);

      Sleep(1000); // dar tiempo al servidor para tramitar la orden

      // --------------------- //
      // Colocación de órdenes //
      // --------------------- //

      // Señal de entrada y apertura de posiciones
      string entrySignal = MA_EntrySignal(cierre1, cierre2, ma1, ma2);
      Comment("AE #", MagicNumber, " | ", exitSignal, " | ", entrySignal, " señales detectadas");

      if((entrySignal == "LARGO" || entrySignal == "CORTO") && RevisionPosicionesColocadas(MagicNumber) == false)
        {
         ulong ticket = AperturaTrades(entrySignal, MagicNumber, VolumenFijo, UtilizarPoliticaRellenado, PoliticaRellenado);

         // Modificación de SL & TP
         if(ticket > 0)   // existe una posición para modificar
           {
            double stopLoss = CalcularStopLoss(entrySignal, SLPuntosFijos, SLPuntosFijosMA, ma1);
            double takeProfit = CalcularTakeProfit(entrySignal, TPPuntosFijos);
            ModificacionPosiciones(ticket, MagicNumber, stopLoss, takeProfit);
           }
        }

      // --------------------- //
      // Gestión de posiciones //
      // --------------------- //

      if(TSLPuntosFijos > 0)
         TrailingStopLoss(MagicNumber, TSLPuntosFijos);

      if(BEPuntosFijos > 0)
         BreakEven(MagicNumber, BEPuntosFijos);
     }

  }
