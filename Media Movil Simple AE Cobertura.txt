//+------------------------------------------------------------------+
//|                              Media Movil Simple AE Cobertura.mq5 |
//|                                            Copyright 2023, Chris |
//|                                                                  |
//+------------------------------------------------------------------+

// Información del asesor

#property copyright "Copyright 2023, Chris"
#property description "Asesor Experto que aplica el sistema de media móvil simple y es provisto como parte del curso en trading algorítmico"
#property link      ""
#property version   "1.00"

// Notas del asesor


// Enumeraciones


// Variables input y globales

sinput group "AE Ajustes Generales"
input ulong MagicNumber = 101;

sinput group "Ajustes media móvil"
input int PeriodoMA = 30; // 30 número de velas a tener en cuenta por defecto
input ENUM_MA_METHOD MetodoMA = MODE_EMA; // media móvil simple por defecto
input int ShiftMA = 0; // número de velas desplazadas la media móvil, por defecto 0
input ENUM_APPLIED_PRICE PrecioMA = PRICE_CLOSE; // por defecto la media móvil se basará en los cierres de velas

sinput group "Gestión monetaria"
input double VolumenFijo = 0.1; // 1 minilote por defecto

sinput group "Gestión de posiciones"
input ushort SLPuntosFijos = 0; // stop loss
input ushort SLPuntosFijosMA = 0; // stop loss que está por encima o debajo de la media móvil
input ushort TPPuntosFijos = 0; // take profit
input ushort TSLPuntosFijos = 0; // trading stop loss
input ushort BEPuntosFijos = 0; // breakeven

datetime glTiempoBarraApertura;
int ManejadorMA;

// Procesadores de eventos

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit()
  {
   glTiempoBarraApertura = D'1971.01.01'; // esto equivale a un año en segundos
   ManejadorMA = MA_Init(PeriodoMA, ShiftMA, MetodoMA, PrecioMA);

   if(ManejadorMA == -1)
     {
      return (INIT_FAILED);
     }

   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {


  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {

// Control de nueva barra

   bool nuevaBarra = false;

// Comprobación de nueva barra

   if(glTiempoBarraApertura != iTime(_Symbol, PERIOD_CURRENT, 0))
     {
      nuevaBarra = true;
      glTiempoBarraApertura = iTime(_Symbol, PERIOD_CURRENT, 0);
     }

   if(nuevaBarra)
     {
      Print("Nueva barra detectada");
      // Precio e indicadores
      double cierre1 = Close(1);
      double cierre2 = Close(2);
      double open1 = Open(1);

      // Normalización a tick size
      double tickSize = SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_SIZE);
      cierre1 = round(cierre1/tickSize) * tickSize;
      cierre2 = round(cierre2/tickSize) * tickSize;

      double ma1 = ma(ManejadorMA, 1);
      double ma2 = ma(ManejadorMA, 2);

      // Cierre de posiciones

      // Señal de cierre
      string exitSignal = MA_ExitSignal(cierre1, cierre2, ma1, ma2);

      if(exitSignal == "CIERRE_LARGO" || exitSignal == "CIERRE_CORTO")
        {

        }

      Sleep(1000); // dar tiempo al servidor para tramitar la orden


      // Colocación de órdenes

      string entrySignal = MA_EntrySignal(cierre1, cierre2, ma1, ma2);

      if(entrySignal == "LARGO")
        {

        }
      else
         if(entrySignal == "CORTO")
           {

           }


      // Gestión de posiciones
     }

  }


// Funciones de precio

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Close(int pShift)
  {
   MqlRates barra[]; // crea un objeto array del tipo estructura MqlRates
   ArraySetAsSeries(barra, true); // configurar array barra como un array en serie (la vela actual se copiará en índice 0, la vela 1 índice 1, ...)
   CopyRates(_Symbol, PERIOD_CURRENT, 0, 3, barra); // copia datos del precio de las barras 0, 1 y 2 a nuestro array barra
   return barra[pShift].close; // retorna el precio de cierre del objeto barra
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double Open(int pShift)
  {
   MqlRates barra[]; // crea un objeto array del tipo estructura MqlRates
   ArraySetAsSeries(barra, true); // configurar array barra como un array en serie (la vela actual se copiará en índice 0, la vela 1 índice 1, ...)
   CopyRates(_Symbol, PERIOD_CURRENT, 0, 3, barra); // copia datos del precio de las barras 0, 1 y 2 a nuestro array barra
   return barra[pShift].open; // retorna el precio de cierre del objeto barra
  }

// Funciones de la media móvil

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int MA_Init(int pPeriodMA, int pShiftMA, ENUM_MA_METHOD pMetodoMA, ENUM_APPLIED_PRICE pPrecioMA)
  {
// En caso de error, al inicializar el MA, GetLastError() nos dará el código del error y lo almacenará en _LastError
// ResetLastError cambiará el valor de la variable a _LastError a 0
   ResetLastError();

// El manejador es un identificador único para el indicador. Se utiliza para todas las acciones relacionadas con este, como obtener datos o eliminarlo
   int Manejador = iMA(_Symbol, PERIOD_CURRENT, pPeriodMA, pShiftMA, pMetodoMA, pPrecioMA);

   if(Manejador == INVALID_HANDLE)
     {
      Print("Ha habido un error creando el manejador del indicador MA", GetLastError());
      return -1;
     }

   Print("El manejador del indicador MA se ha creado con éxito");
   return Manejador;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double ma(int pManejadorMA, int pShift)
  {
   ResetLastError();

// Creamos array que llenamos con los precios del indicador
   double ma[];
   ArraySetAsSeries(ma, true);
// Llenamos el array con los 3 valores más recientes del MA

   bool resultado = CopyBuffer(pManejadorMA, 0, 0, 3, ma);
   if(resultado == false)
     {
      Print("Error al copiar datos: ", GetLastError());

     }

   double valorMA = ma[pShift];

// Normalizamos valorMA a los dígitos de nuestro símbolo y lo retornamos
   valorMA = NormalizeDouble(valorMA, _Digits);

   return valorMA;
  }
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string MA_EntrySignal(double pPrecio1, double pPrecio2, double pMA1, double pMA2)
  {
   string str = "";
   string valores;

   if(pPrecio1 > pMA1 && pPrecio2 <= pMA2)
     {
      str = "LARGO";
     }
   else
      if(pPrecio1 > pMA1 && pPrecio2 >= pMA2)
        {
         str = "CORTO";
        }
      else
        {
         str = "NO_OPERAR";
        }

   StringConcatenate(valores, "MA 1: ", DoubleToString(pMA1, _Digits), " | ", "MA 2: ", DoubleToString(pMA2, _Digits), " | ",  "Cierre 1: ", DoubleToString(pPrecio1, _Digits), " | ",  "Cierre 2: ", DoubleToString(pPrecio2, _Digits));

   Print("Valores del precio e indicadores: ", valores);

   return str;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string MA_ExitSignal(double pPrecio1, double pPrecio2, double pMA1, double pMA2)
  {
   string str = "";
   string valores;

   if(pPrecio1 > pMA1 && pPrecio2 <= pMA2)
     {
      str = "CIERRE_CORTO";
     }
   else
      if(pPrecio1 > pMA1 && pPrecio2 >= pMA2)
        {
         str = "CIERRE_LARGO";
        }
      else
        {
         str = "NO_CERRAR";
        }

   StringConcatenate(valores, "MA 1: ", DoubleToString(pMA1, _Digits), " | ", "MA 2: ", DoubleToString(pMA2, _Digits), " | ",  "Cierre 1: ", DoubleToString(pPrecio1, _Digits), " | ",  "Cierre 2: ", DoubleToString(pPrecio2, _Digits));

   Print("Valores del precio e indicadores: ", valores);

   return str;
  }

// Funciones de las bandas de Bollinger

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int BB_Init(int pPeriodBB, int pShiftBB, double pDesviacionBB, ENUM_APPLIED_PRICE pPrecioBB)
  {
// En caso de error, al inicializar las BB, GetLastError() nos dará el código del error y lo almacenará en _LastError
// ResetLastError cambiará el valor de la variable a _LastError a 0
   ResetLastError();

// El manejador es un identificador único para el indicador. Se utiliza para todas las acciones relacionadas con este, como obtener datos o eliminarlo
   int Manejador = iBands(_Symbol, PERIOD_CURRENT, pPeriodBB, pShiftBB, pDesviacionBB, pPrecioBB);

   if(Manejador == INVALID_HANDLE)
     {
      Print("Ha habido un error creando el manejador del indicador BB", GetLastError());
      return -1;
     }

   Print("El manejador del indicador BB se ha creado con éxito");
   return Manejador;
  }
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double BB(int pManejadorBB, int pBuffer, int pShift)
  {
   ResetLastError();

// Creamos array que llenamos con los precios del indicador
   double BB[];
   ArraySetAsSeries(BB, true);
// Llenamos el array con los 3 valores más recientes del MA

   bool resultado = CopyBuffer(pManejadorBB, pBuffer, 0, 3, BB);
   if(resultado == false)
     {
      Print("Error al copiar datos: ", GetLastError());

     }

   double valorBB = BB[pShift];

// Normalizamos valorMA a los dígitos de nuestro símbolo y lo retornamos
   valorBB = NormalizeDouble(valorBB, _Digits);

   return valorBB;
  }
//+------------------------------------------------------------------+
